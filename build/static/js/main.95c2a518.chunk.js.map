{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/Notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","className","onClick","type","id","checked","important","readOnly","content","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","noteService","getAll","axios","get","then","response","data","create","newObject","post","update","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"4KAiBeA,EAfF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAIlB,OACI,qBAAIC,UAAU,OAAd,UACI,uBAAOC,QAASF,EAAkBG,KAAK,WAAWC,GAAIL,EAAKK,GAC3DC,QAASN,EAAKO,UAAWC,UAAQ,IAEhCR,EAAKS,YCCHC,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,qBAAKT,UAAU,QAAf,SACKS,KCOEC,EAdA,WAMX,OACI,sBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACI,uBACA,2G,gBCPNC,EAAU,aAqBDC,EAFK,CAAEC,OAhBP,WAGX,OAFgBC,IAAMC,IAAIJ,GAEXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAafC,OAVf,SAAAC,GAEX,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQPI,OALvB,SAACvB,EAAIqB,GAEhB,OADgBN,IAAMS,IAAN,UAAaZ,EAAb,YAAwBZ,GAAMqB,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UC+E9BM,EA1FH,WACR,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACNtB,EACKC,SACAG,MAAK,SAAAmB,GACFR,EAASQ,QAElB,IAEH,IAyCMC,EAAcN,EACdJ,EACAA,EAAMW,QAAO,SAAA3C,GAAI,OAAIA,EAAKO,aAGhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcI,QAAS2B,IACvB,8BACI,yBAAQnC,QAAS,kBAAMkC,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKM,EAAYE,KAAI,SAAA5C,GAAI,OACjB,cAAC,EAAD,CAEIA,KAAMA,EACNC,iBAAkB,kBAvCX,SAAAI,GACvB,IAAML,EAAOgC,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEzC,KAAOA,KAChC0C,EAAW,2BAAQ/C,GAAR,IAAcO,WAAYP,EAAKO,YAEhDW,EACKU,OAAOvB,EAAI0C,GACXzB,MAAK,SAAA0B,GACFf,EAASD,EAAMY,KAAI,SAAA5C,GAAI,OAAIA,EAAKK,KAAOA,EAAKL,EAAOgD,SAEtDC,OAAM,SAAAC,GACHX,EAAgB,UAAD,OACDvC,EAAKK,GADJ,6BAGf8C,YAAW,WACPZ,EAAgB,QACjB,KACHN,EAASD,EAAMW,QAAO,SAAAG,GAAC,OAAIA,EAAEzC,KAAOA,SAuBJ+C,CAAmBpD,EAAKK,MAF3CL,EAAKK,SAMtB,uBAAMgD,SAhEE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf/C,QAASyB,EACTuB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,GAC3BxD,GAAI2B,EAAM8B,OAAS,GAGvB5C,EACKO,OAAO+B,GACPlC,MAAK,SAAA0B,GACFf,EAASD,EAAM+B,OAAOf,IACtBb,EAAW,QAmDf,UACI,uBACI6B,MAAO9B,EACP+B,SAlDS,SAACX,GACtBnB,EAAWmB,EAAMY,OAAOF,UAmDhB,wBAAQ5D,KAAK,SAAb,qBAEJ,cAAC,EAAD,QCxFZ+D,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.95c2a518.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    // const label = note.important\r\n    //     ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            <input onClick={toggleImportance} type=\"checkbox\" id={note.id}\r\n            checked={note.important} readOnly\r\n            />\r\n            {note.content}\r\n            {/* <button onClick={toggleImportance}>{label}</button> */}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","const Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","const Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\n// const baseUrl = 'http://localhost:3001/api/notes'\r\nconst baseUrl = '/api/notes'\r\n// const baseUrl = 'https://ancient-bastion-81377.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst noteService = { getAll, create, update }\r\n\r\nexport default noteService","import React, { useState, useEffect } from 'react'\n\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/Notes'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n        \n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n    \n    const toggleImportanceOf = id => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note #'${note.id}' is removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note\n                        key={note.id}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input \n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from \"react-dom\";\nimport './index.css';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}